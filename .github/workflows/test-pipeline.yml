name: Test Pipeline

on:
  # push:
    # branches: [ main, develop, local-test-data ]
  pull_request:
    branches: [ main ]

jobs:
  test-pipeline:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Checkout autoeval-jobs repository
      uses: actions/checkout@v4
      with:
        repository: NGWPC/autoeval-jobs
        path: autoeval-jobs-repo
        
    - name: Check for required files
      run: |
        echo "Checking for .env.docker file..."
        if [ ! -f .env.docker ]; then
          echo "ERROR: .env.docker file not found!"
          echo "This file is required for the PostgreSQL and STAC API services."
          exit 1
        fi
        echo ".env.docker file found"
        echo "Contents of .env.docker:"
        cat .env.docker
    
    - name: Build container images
      run: |
        docker build -t autoeval-coordinator:local .
        docker build -t autoeval-jobs:local -f autoeval-jobs-repo/Dockerfile autoeval-jobs-repo/
        docker build -t autoeval-jobs-gval:local -f autoeval-jobs-repo/Dockerfile.gval autoeval-jobs-repo/
        
    - name: Start infrastructure services
      run: |
        # Start main services (STAC, PostgreSQL, asset server) - exclude autoeval-dev
        docker compose up -d test-stac-fastapi-pgstac test-pgstac test-asset-server
        
        # Start Nomad
        cd local-nomad
        docker compose up -d
        cd ..
        
        echo "=== All running containers ==="
        docker ps
        echo "=== All containers (including stopped) ==="
        docker ps -a
        
    - name: Wait for services to be ready
      run: |
        echo "Waiting for Nomad to be ready..."
        for i in {1..10}; do
          if curl -f http://localhost:4646/v1/status/leader 2>/dev/null; then
            echo "Nomad is ready"
            break
          fi
          echo "Waiting for Nomad... ($i/10)"
          sleep 5
        done
        
        if ! curl -f http://localhost:4646/v1/status/leader 2>/dev/null; then
          echo "Nomad failed to start"
          exit 1
        fi
        
        echo "Waiting for STAC API to be ready..."
        for i in {1..5}; do
          if curl -f http://localhost:8888/_mgmt/ping 2>/dev/null | grep -q "PONG"; then
            echo "STAC API is ready"
            break
          fi
          echo "Waiting for STAC API... ($i/5)"
          sleep 5
        done
        
        if ! curl -f http://localhost:8888/_mgmt/ping 2>/dev/null | grep -q "PONG"; then
          echo "STAC API failed to start"
          docker compose logs test-stac-fastapi-pgstac --tail 20 || echo "Could not get STAC logs"
          exit 1
        fi
        
    - name: Load test data into STAC API
      run: |
        echo "Loading test data into STAC API..."
        
        echo "Loading collection..."
        curl -X POST http://localhost:8888/collections \
          -H "Content-Type: application/json" \
          -d @test/bench-data/collection.json \
          -f -v || echo "Failed to load collection"
        
        echo "Loading STAC item..."
        curl -X POST http://localhost:8888/collections/usgs-fim-collection/items \
          -H "Content-Type: application/json" \
          -d @test/bench-data/01080203-shvm3-usgs.json \
          -f -v || echo "Failed to load item"
        
        echo "Verifying data load..."
        curl -f http://localhost:8888/collections >/dev/null || echo "Failed to retrieve collections"
        
    - name: Create test output directory
      run: |
        sudo mkdir -p /tmp/autoeval-outputs/test-run
        sudo chmod 777 /tmp/autoeval-outputs/test-run
        
    - name: Run pipeline test
      run: |
        # Dispatch the pipeline job
        echo "Dispatching pipeline job..."
        JOB_OUTPUT=$(docker exec nomad-server nomad job dispatch \
          -meta="aoi=/test/test-data-query-polygon.gpkg" \
          -meta="outputs_path=/outputs/test-run" \
          -meta="hand_index_path=/test/hand-data/parquet-index/" \
          -meta="benchmark_sources=usgs-fim-collection" \
          pipeline)
        
        echo "Job dispatch output: $JOB_OUTPUT"
        
        # Extract job ID from output (format: "Dispatched Job ID = pipeline/dispatch-...")
        JOB_ID=$(echo "$JOB_OUTPUT" | grep -oP 'Dispatched Job ID = \K[^\s]+')
        
        if [ -z "$JOB_ID" ]; then
          echo "Failed to extract job ID from output:"
          echo "$JOB_OUTPUT"
          echo "Trying alternative extraction methods..."
          JOB_ID=$(echo "$JOB_OUTPUT" | grep -oP '(?<=Job ")[^"]+')
        fi
        
        if [ -z "$JOB_ID" ]; then
          echo "Still failed to extract job ID. Full output was:"
          echo "$JOB_OUTPUT"
          exit 1
        fi
        
        echo "Pipeline job dispatched with ID: $JOB_ID"
        
        # Monitor job status by checking allocations (every 2 minutes)
        for i in {1..30}; do
          # Get job status (not JSON since it's complex to parse)
          JOB_STATUS_OUTPUT=$(docker exec nomad-server nomad job status "$JOB_ID" 2>/dev/null || echo "Error getting job status")
          echo "=== Job Status Check $i/30 (every 2 minutes) ==="
          echo "$JOB_STATUS_OUTPUT"
          
          # Extract allocation ID from the job status output
          ALLOC_ID=$(echo "$JOB_STATUS_OUTPUT" | grep -oP '^[a-f0-9]{8}' | head -1)
          
          
          # Check if job is complete by looking for "Status = dead" and allocation "Status = complete"
          if echo "$JOB_STATUS_OUTPUT" | grep -q "Status.*=.*dead" && echo "$JOB_STATUS_OUTPUT" | grep -q "complete"; then
            echo "Pipeline job completed!"
            
            if [ -n "$ALLOC_ID" ]; then
              echo "=== Final Pipeline Container Logs (full stdout) - Allocation: $ALLOC_ID ==="
              docker exec nomad-server nomad alloc logs "$ALLOC_ID" coordinator 2>/dev/null || echo "No stdout logs available"
              
              echo "=== Final Pipeline Container Logs (full stderr) - Allocation: $ALLOC_ID ==="
              docker exec nomad-server nomad alloc logs -stderr "$ALLOC_ID" coordinator 2>/dev/null || echo "No stderr logs available"
            fi
            
            break
          elif echo "$JOB_STATUS_OUTPUT" | grep -q "failed"; then
            echo "Pipeline failed!"
            
            if [ -n "$ALLOC_ID" ]; then
              echo "=== Failed Pipeline Container Logs (full stdout) - Allocation: $ALLOC_ID ==="
              docker exec nomad-server nomad alloc logs "$ALLOC_ID" coordinator 2>/dev/null || echo "No stdout logs available"
              
              echo "=== Failed Pipeline Container Logs (full stderr) - Allocation: $ALLOC_ID ==="
              docker exec nomad-server nomad alloc logs -stderr "$ALLOC_ID" coordinator 2>/dev/null || echo "No stderr logs available"
              
              echo "=== Debugging: What can the container see? ==="
              echo "Checking if we can exec into running container..."
              docker exec nomad-server nomad alloc exec "$ALLOC_ID" coordinator ls -la /test/ 2>/dev/null || echo "Cannot exec into container"
            fi
            
            exit 1
          fi
          
          sleep 120
        done
        
        # Check if we exited the loop due to timeout
        if [ $i -eq 30 ]; then
          echo "Pipeline timed out after 60 minutes"
          echo "=== Final Job Status ==="
          FINAL_STATUS=$(docker exec nomad-server nomad job status "$JOB_ID")
          echo "$FINAL_STATUS"
          
          # Try to get final allocation ID for logs
          FINAL_ALLOC_ID=$(echo "$FINAL_STATUS" | grep -oP '^[a-f0-9]{8}' | head -1)
          if [ -n "$FINAL_ALLOC_ID" ]; then
            echo "=== Pipeline Container Logs (stderr) - Allocation: $FINAL_ALLOC_ID ==="
            docker exec nomad-server nomad alloc logs -stderr "$FINAL_ALLOC_ID" coordinator 2>/dev/null || echo "No stderr logs available"
          fi
          exit 1
        fi
        
    - name: Validate pipeline outputs
      run: |
        echo "Checking pipeline outputs..."
        ls -la /tmp/autoeval-outputs/test-run/ || echo "Output directory not found"
        
        # Check for any output files (since mosaic.tif might not be the actual output name)
        if [ -n "$(ls -A /tmp/autoeval-outputs/test-run/)" ]; then
          echo "Pipeline outputs found:"
          find /tmp/autoeval-outputs/test-run/ -type f -exec ls -la {} \;
        else
          echo "No pipeline outputs found"
          exit 1
        fi
        
        echo "Pipeline validation completed successfully"
        
    - name: Collect logs on failure
      if: failure()
      run: |
        echo "=== Docker Containers ==="
        docker ps -a
        
        echo "=== Nomad Server Status ==="
        docker exec nomad-server nomad server members 2>/dev/null || echo "Cannot get server status"
        
        echo "=== Active Jobs ==="
        docker exec nomad-server nomad job status 2>/dev/null || echo "Cannot get job status"
        
        echo "=== Recent Nomad Server Logs ==="
        docker logs nomad-server --tail 50 2>/dev/null || echo "Cannot get Nomad logs"
        
        echo "=== Infrastructure Service Logs ==="
        docker compose logs --tail 20 2>/dev/null || echo "Cannot get compose logs"
        
